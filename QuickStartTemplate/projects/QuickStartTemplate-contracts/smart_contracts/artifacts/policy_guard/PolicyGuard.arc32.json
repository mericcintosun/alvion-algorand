{
    "hints": {
        "init(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "setAllowedApps(application,application,application,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePolicy(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "enforce()void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 7
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "creator": {
                    "type": "bytes",
                    "key": "creator"
                },
                "folksDepositApp": {
                    "type": "uint64",
                    "key": "folks_dep"
                },
                "folksStakingApp": {
                    "type": "uint64",
                    "key": "folks_stk"
                },
                "maxAmountMicroAlgo": {
                    "type": "uint64",
                    "key": "max_amt"
                },
                "maxFeeMicroAlgo": {
                    "type": "uint64",
                    "key": "max_fee"
                },
                "maxSlippageBps": {
                    "type": "uint64",
                    "key": "max_slip"
                },
                "tinymanPoolApp": {
                    "type": "uint64",
                    "key": "t_pool"
                },
                "tinymanRouterApp": {
                    "type": "uint64",
                    "key": "t_router"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "PolicyGuard",
        "desc": "Alvion Policy Guard (ATS)\n- Grup boyutu, toplam fee limiti\n- Ayn\u0131 sender, rekey/close-to yasak\n- Allowed App ID listesi (Application tipi)\n- \u00d6deme/ASA transfer \u00fcst s\u0131n\u0131r\u0131\n- Tinyman Router \u00e7a\u011fr\u0131s\u0131nda minOut > 0 kontrol\u00fc (btoi)",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "uint64",
                        "name": "maxFee"
                    },
                    {
                        "type": "uint64",
                        "name": "maxAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "maxSlipBps"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setAllowedApps",
                "args": [
                    {
                        "type": "application",
                        "name": "folksDeposit"
                    },
                    {
                        "type": "application",
                        "name": "folksStaking"
                    },
                    {
                        "type": "application",
                        "name": "tinymanRouter"
                    },
                    {
                        "type": "application",
                        "name": "tinymanPool"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updatePolicy",
                "args": [
                    {
                        "type": "uint64",
                        "name": "maxFee"
                    },
                    {
                        "type": "uint64",
                        "name": "maxAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "maxSlipBps"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "enforce",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}