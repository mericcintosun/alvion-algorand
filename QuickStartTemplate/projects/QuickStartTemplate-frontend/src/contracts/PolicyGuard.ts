/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PolicyGuard","structs":{},"methods":[{"name":"init","args":[{"type":"uint64","name":"maxFee"},{"type":"uint64","name":"maxAmount"},{"type":"uint64","name":"maxSlipBps"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setAllowedApps","args":[{"type":"application","name":"folksDeposit"},{"type":"application","name":"folksStaking"},{"type":"application","name":"tinymanRouter"},{"type":"application","name":"tinymanPool"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updatePolicy","args":[{"type":"uint64","name":"maxFee"},{"type":"uint64","name":"maxAmount"},{"type":"uint64","name":"maxSlipBps"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"enforce","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Alvion Policy Guard (ATS)\n- Grup boyutu, toplam fee limiti\n- Aynı sender, rekey/close-to yasak\n- Allowed App ID listesi (Application tipi)\n- Ödeme/ASA transfer üst sınırı\n- Tinyman Router çağrısında minOut > 0 kontrolü (btoi)","networks":{},"state":{"schema":{"global":{"ints":7,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creator":{"keyType":"AVMString","valueType":"address","key":"Y3JlYXRvcg=="},"maxFeeMicroAlgo":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X2ZlZQ=="},"maxAmountMicroAlgo":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X2FtdA=="},"maxSlippageBps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X3NsaXA="},"folksDepositApp":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zm9sa3NfZGVw"},"folksStakingApp":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zm9sa3Nfc3Rr"},"tinymanRouterApp":{"keyType":"AVMString","valueType":"AVMUint64","key":"dF9yb3V0ZXI="},"tinymanPoolApp":{"keyType":"AVMString","valueType":"AVMUint64","key":"dF9wb29s"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[161,173,197,233],"errorMessage":"OnCompletion is not NoOp"},{"pc":[283,315],"errorMessage":"Only creator"},{"pc":[606],"errorMessage":"asset close-to not allowed"},{"pc":[600],"errorMessage":"asset transfer too big"},{"pc":[164,176,200],"errorMessage":"can only call when not creating"},{"pc":[281,313,378,429,438,448,459,472,567,598],"errorMessage":"check GlobalState exists"},{"pc":[575],"errorMessage":"close-to not allowed"},{"pc":[347],"errorMessage":"group too large"},{"pc":[343],"errorMessage":"group too small"},{"pc":[491],"errorMessage":"minOut=0"},{"pc":[536],"errorMessage":"mixed senders"},{"pc":[511],"errorMessage":"no allowed application"},{"pc":[569],"errorMessage":"payment too big"},{"pc":[543],"errorMessage":"rekey not allowed"},{"pc":[486],"errorMessage":"router args"},{"pc":[382],"errorMessage":"total fee too high"},{"pc":[417],"errorMessage":"transaction type is appl"},{"pc":[589],"errorMessage":"transaction type is axfer"},{"pc":[558],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAECBiYIB21heF9hbXQHbWF4X2ZlZQh0X3JvdXRlcghtYXhfc2xpcAlmb2xrc19kZXAJZm9sa3Nfc3RrBnRfcG9vbAdjcmVhdG9yMRhAACEpgcCaDGcogYCU69wDZyuBMmcnBCJnJwUiZyoiZycGImcxG0EAI4IEBGlEPfcEQhz9QgQ3DHByBMOyBLM2GgCOBABKACYADgACIkMxGRREMRhEiAChI0MxGRREMRhENhoBFzYaAhc2GgMXiABwI0MxGRREMRhENhoBF8AyNhoCF8AyNhoDF8AyNhoEF8AyiAAsI0MxGRRENhoBFzYaAhc2GgMXiAACI0OKAwAnBzEAZymL/Wcoi/5nK4v/Z4mKBAAxACInB2VEEkQnBIv8ZycFi/1nKov+ZycGi/9niYoDADEAIicHZUQSRCmL/Wcoi/5nK4v/Z4mKAAAigABHBDIERwIkD0SBEA5EIkmLCIsGDEEAEYsISTgBiwcIjAcjCIwIQv/nIillRIsHD0QijAIijAiLCIsGDEEAcIsIOBBJjAUlEosCjANBAFOLBSUSRIsIOBhJjAEiJwRlRBJAACAiJwVlRIsBEkAAFSIqZUSLARJAAAsiJwZlRIsBEkEAGiOMAiIqZUSLARJBAA2LCEk4GyQPRCPCGhdEiwKMA4sDjAKLCCMIjAhC/4iLAkQiOACMACKMCIsIiwYMQQBYiwhJOACLABJESTggMgMSRDgQSYwEIxJBABaLBCMSRIsISTgIIihlRA5EOAkyAxJEiwSBBBJBABeLBIEEEkSLCEk4EiIoZUQORDgVMgMSRIsIIwiMCEL/oIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PolicyGuard contract
 */
export type PolicyGuardArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(uint64,uint64,uint64)void': {
      maxFee: bigint | number
      maxAmount: bigint | number
      maxSlipBps: bigint | number
    }
    'setAllowedApps(application,application,application,application)void': {
      folksDeposit: bigint
      folksStaking: bigint
      tinymanRouter: bigint
      tinymanPool: bigint
    }
    'updatePolicy(uint64,uint64,uint64)void': {
      maxFee: bigint | number
      maxAmount: bigint | number
      maxSlipBps: bigint | number
    }
    'enforce()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(uint64,uint64,uint64)void': [maxFee: bigint | number, maxAmount: bigint | number, maxSlipBps: bigint | number]
    'setAllowedApps(application,application,application,application)void': [folksDeposit: bigint, folksStaking: bigint, tinymanRouter: bigint, tinymanPool: bigint]
    'updatePolicy(uint64,uint64,uint64)void': [maxFee: bigint | number, maxAmount: bigint | number, maxSlipBps: bigint | number]
    'enforce()void': []
  }
}

/**
 * The return type for each method
 */
export type PolicyGuardReturns = {
  'init(uint64,uint64,uint64)void': void
  'setAllowedApps(application,application,application,application)void': void
  'updatePolicy(uint64,uint64,uint64)void': void
  'enforce()void': void
}

/**
 * Defines the types of available calls and state of the PolicyGuard smart contract.
 */
export type PolicyGuardTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(uint64,uint64,uint64)void' | 'init', {
      argsObj: PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void']
      argsTuple: PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']
      returns: PolicyGuardReturns['init(uint64,uint64,uint64)void']
    }>
    & Record<'setAllowedApps(application,application,application,application)void' | 'setAllowedApps', {
      argsObj: PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void']
      argsTuple: PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']
      returns: PolicyGuardReturns['setAllowedApps(application,application,application,application)void']
    }>
    & Record<'updatePolicy(uint64,uint64,uint64)void' | 'updatePolicy', {
      argsObj: PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void']
      argsTuple: PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']
      returns: PolicyGuardReturns['updatePolicy(uint64,uint64,uint64)void']
    }>
    & Record<'enforce()void' | 'enforce', {
      argsObj: PolicyGuardArgs['obj']['enforce()void']
      argsTuple: PolicyGuardArgs['tuple']['enforce()void']
      returns: PolicyGuardReturns['enforce()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creator: string
        maxFeeMicroAlgo: bigint
        maxAmountMicroAlgo: bigint
        maxSlippageBps: bigint
        folksDepositApp: bigint
        folksStakingApp: bigint
        tinymanRouterApp: bigint
        tinymanPoolApp: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PolicyGuardSignatures = keyof PolicyGuardTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PolicyGuardNonVoidMethodSignatures = keyof PolicyGuardTypes['methods'] extends infer T ? T extends keyof PolicyGuardTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PolicyGuard smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PolicyGuardSignatures> = PolicyGuardTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PolicyGuard smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PolicyGuardSignatures> = PolicyGuardTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PolicyGuardTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PolicyGuardCreateCallParams =
  | Expand<CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & {method: 'init'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & {method: 'init(uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PolicyGuardDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PolicyGuardCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PolicyGuard smart contract
 */
export abstract class PolicyGuardParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PolicyGuardCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'init':
          case 'init(uint64,uint64,uint64)void':
            return PolicyGuardParamsFactory.create.init(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the PolicyGuard smart contract using the init(uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      init(params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'init(uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maxFee, params.args.maxAmount, params.args.maxSlipBps],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the init(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'init(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxFee, params.args.maxAmount, params.args.maxSlipBps],
    }
  }
  /**
   * Constructs a no op call for the setAllowedApps(application,application,application,application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAllowedApps(params: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAllowedApps(application,application,application,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.folksDeposit, params.args.folksStaking, params.args.tinymanRouter, params.args.tinymanPool],
    }
  }
  /**
   * Constructs a no op call for the updatePolicy(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePolicy(params: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePolicy(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxFee, params.args.maxAmount, params.args.maxSlipBps],
    }
  }
  /**
   * Constructs a no op call for the enforce()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static enforce(params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'enforce()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PolicyGuard smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PolicyGuardFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PolicyGuardFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PolicyGuardClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PolicyGuardClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PolicyGuard smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PolicyGuardDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? PolicyGuardParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (PolicyGuardCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new PolicyGuardClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PolicyGuard smart contract using the init(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      init: (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(PolicyGuardParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PolicyGuard smart contract using the init(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      init: (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(PolicyGuardParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PolicyGuard smart contract using an ABI method call using the init(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      init: async (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(PolicyGuardParamsFactory.create.init(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | PolicyGuardReturns['init(uint64,uint64,uint64)void']) }, appClient: new PolicyGuardClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PolicyGuard smart contract
 */
export class PolicyGuardClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PolicyGuardClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PolicyGuard app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PolicyGuardClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PolicyGuardNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PolicyGuardClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PolicyGuardClient> {
    return new PolicyGuardClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PolicyGuardClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PolicyGuardClient> {
    return new PolicyGuardClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PolicyGuard smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `init(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PolicyGuardParamsFactory.init(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `setAllowedApps(application,application,application,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAllowedApps: (params: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PolicyGuardParamsFactory.setAllowedApps(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `updatePolicy(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePolicy: (params: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PolicyGuardParamsFactory.updatePolicy(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `enforce()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    enforce: (params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PolicyGuardParamsFactory.enforce(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PolicyGuard smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `init(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PolicyGuardParamsFactory.init(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `setAllowedApps(application,application,application,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAllowedApps: (params: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PolicyGuardParamsFactory.setAllowedApps(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `updatePolicy(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePolicy: (params: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PolicyGuardParamsFactory.updatePolicy(params))
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `enforce()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    enforce: (params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PolicyGuardParamsFactory.enforce(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PolicyGuard smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `init(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PolicyGuardParamsFactory.init(params))
      return {...result, return: result.return as unknown as (undefined | PolicyGuardReturns['init(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `setAllowedApps(application,application,application,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAllowedApps: async (params: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PolicyGuardParamsFactory.setAllowedApps(params))
      return {...result, return: result.return as unknown as (undefined | PolicyGuardReturns['setAllowedApps(application,application,application,application)void'])}
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `updatePolicy(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePolicy: async (params: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PolicyGuardParamsFactory.updatePolicy(params))
      return {...result, return: result.return as unknown as (undefined | PolicyGuardReturns['updatePolicy(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the PolicyGuard smart contract using the `enforce()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    enforce: async (params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PolicyGuardParamsFactory.enforce(params))
      return {...result, return: result.return as unknown as (undefined | PolicyGuardReturns['enforce()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PolicyGuardClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the PolicyGuard smart contract using the `enforce()void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async enforce(params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> = {args: []}) {
    const result = await this.appClient.send.call(PolicyGuardParamsFactory.enforce(params))
    return result.return as unknown as PolicyGuardReturns['enforce()void']
  }

  /**
   * Methods to access state for the current PolicyGuard app
   */
  state = {
    /**
     * Methods to access global state for the current PolicyGuard app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creator: result.creator,
          maxFeeMicroAlgo: result.maxFeeMicroAlgo,
          maxAmountMicroAlgo: result.maxAmountMicroAlgo,
          maxSlippageBps: result.maxSlippageBps,
          folksDepositApp: result.folksDepositApp,
          folksStakingApp: result.folksStakingApp,
          tinymanRouterApp: result.tinymanRouterApp,
          tinymanPoolApp: result.tinymanPoolApp,
        }
      },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creator")) as string | undefined },
      /**
       * Get the current value of the maxFeeMicroAlgo key in global state
       */
      maxFeeMicroAlgo: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxFeeMicroAlgo")) as bigint | undefined },
      /**
       * Get the current value of the maxAmountMicroAlgo key in global state
       */
      maxAmountMicroAlgo: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxAmountMicroAlgo")) as bigint | undefined },
      /**
       * Get the current value of the maxSlippageBps key in global state
       */
      maxSlippageBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxSlippageBps")) as bigint | undefined },
      /**
       * Get the current value of the folksDepositApp key in global state
       */
      folksDepositApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("folksDepositApp")) as bigint | undefined },
      /**
       * Get the current value of the folksStakingApp key in global state
       */
      folksStakingApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("folksStakingApp")) as bigint | undefined },
      /**
       * Get the current value of the tinymanRouterApp key in global state
       */
      tinymanRouterApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tinymanRouterApp")) as bigint | undefined },
      /**
       * Get the current value of the tinymanPoolApp key in global state
       */
      tinymanPoolApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tinymanPoolApp")) as bigint | undefined },
    },
  }

  public newGroup(): PolicyGuardComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a init(uint64,uint64,uint64)void method call against the PolicyGuard contract
       */
      init(params: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.init(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAllowedApps(application,application,application,application)void method call against the PolicyGuard contract
       */
      setAllowedApps(params: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAllowedApps(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePolicy(uint64,uint64,uint64)void method call against the PolicyGuard contract
       */
      updatePolicy(params: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePolicy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a enforce()void method call against the PolicyGuard contract
       */
      enforce(params: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.enforce(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the PolicyGuard contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PolicyGuardComposer
  }
}
export type PolicyGuardComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(params?: CallParams<PolicyGuardArgs['obj']['init(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['init(uint64,uint64,uint64)void']>): PolicyGuardComposer<[...TReturns, PolicyGuardReturns['init(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the setAllowedApps(application,application,application,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAllowedApps(params?: CallParams<PolicyGuardArgs['obj']['setAllowedApps(application,application,application,application)void'] | PolicyGuardArgs['tuple']['setAllowedApps(application,application,application,application)void']>): PolicyGuardComposer<[...TReturns, PolicyGuardReturns['setAllowedApps(application,application,application,application)void'] | undefined]>

  /**
   * Calls the updatePolicy(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePolicy(params?: CallParams<PolicyGuardArgs['obj']['updatePolicy(uint64,uint64,uint64)void'] | PolicyGuardArgs['tuple']['updatePolicy(uint64,uint64,uint64)void']>): PolicyGuardComposer<[...TReturns, PolicyGuardReturns['updatePolicy(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the enforce()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  enforce(params?: CallParams<PolicyGuardArgs['obj']['enforce()void'] | PolicyGuardArgs['tuple']['enforce()void']>): PolicyGuardComposer<[...TReturns, PolicyGuardReturns['enforce()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PolicyGuard smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PolicyGuardComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PolicyGuardComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PolicyGuardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PolicyGuardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PolicyGuardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PolicyGuardComposerResults<TReturns>>
}
export type PolicyGuardComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

